// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TurismoGlobalArandas.Context;

#nullable disable

namespace TurismoGlobalArandas.Migrations
{
    [DbContext(typeof(TurismoGlobalContext))]
    [Migration("20230901192202_columns_reservationHotel")]
    partial class columns_reservationHotel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.Commissions", b =>
                {
                    b.Property<int>("CommissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommissionId"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("CommissionAgency")
                        .HasColumnType("float");

                    b.Property<double?>("CommissionClient")
                        .HasColumnType("float");

                    b.Property<double?>("CommissionEmployee")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("CommissionId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Commissions");

                    b.HasData(
                        new
                        {
                            CommissionId = 1,
                            CommissionAgency = 0.14999999999999999,
                            CommissionClient = 0.10000000000000001,
                            CommissionEmployee = 0.050000000000000003,
                            IsDeleted = false,
                            ProviderId = 1
                        },
                        new
                        {
                            CommissionId = 2,
                            CommissionAgency = 0.14999999999999999,
                            CommissionClient = 0.0,
                            CommissionEmployee = 0.14999999999999999,
                            IsDeleted = false,
                            ProviderId = 2
                        },
                        new
                        {
                            CommissionId = 3,
                            CommissionAgency = 0.14999999999999999,
                            CommissionClient = 0.10000000000000001,
                            CommissionEmployee = 0.050000000000000003,
                            IsDeleted = false,
                            ProviderId = 3
                        },
                        new
                        {
                            CommissionId = 4,
                            CommissionAgency = 0.10000000000000001,
                            CommissionClient = 0.0,
                            CommissionEmployee = 0.10000000000000001,
                            IsDeleted = false,
                            ProviderId = 4
                        },
                        new
                        {
                            CommissionId = 5,
                            CommissionAgency = 0.17999999999999999,
                            CommissionClient = 0.13,
                            CommissionEmployee = 0.050000000000000003,
                            IsDeleted = false,
                            ProviderId = 5
                        },
                        new
                        {
                            CommissionId = 6,
                            CommissionAgency = 0.17999999999999999,
                            CommissionClient = 0.10000000000000001,
                            CommissionEmployee = 0.080000000000000002,
                            IsDeleted = false,
                            ProviderId = 6
                        },
                        new
                        {
                            CommissionId = 7,
                            CommissionAgency = 0.10000000000000001,
                            CommissionClient = 0.0,
                            CommissionEmployee = 0.10000000000000001,
                            IsDeleted = false,
                            ProviderId = 7
                        },
                        new
                        {
                            CommissionId = 8,
                            CommissionAgency = 0.050000000000000003,
                            CommissionClient = 0.0,
                            CommissionEmployee = 0.050000000000000003,
                            IsDeleted = false,
                            ProviderId = 8
                        },
                        new
                        {
                            CommissionId = 9,
                            CommissionAgency = 0.14999999999999999,
                            CommissionClient = 0.080000000000000002,
                            CommissionEmployee = 0.070000000000000007,
                            IsDeleted = false,
                            ProviderId = 9
                        },
                        new
                        {
                            CommissionId = 10,
                            CommissionAgency = 0.17000000000000001,
                            CommissionClient = 0.12,
                            CommissionEmployee = 0.050000000000000003,
                            IsDeleted = false,
                            ProviderId = 10
                        },
                        new
                        {
                            CommissionId = 11,
                            CommissionAgency = 0.10000000000000001,
                            CommissionClient = 0.050000000000000003,
                            CommissionEmployee = 0.050000000000000003,
                            IsDeleted = false,
                            ProviderId = 11
                        },
                        new
                        {
                            CommissionId = 12,
                            CommissionAgency = 0.10000000000000001,
                            CommissionClient = 0.0,
                            CommissionEmployee = 0.10000000000000001,
                            IsDeleted = false,
                            ProviderId = 12
                        },
                        new
                        {
                            CommissionId = 13,
                            CommissionAgency = 0.20000000000000001,
                            CommissionClient = 0.0,
                            CommissionEmployee = 0.20000000000000001,
                            IsDeleted = false,
                            ProviderId = 13
                        },
                        new
                        {
                            CommissionId = 14,
                            CommissionAgency = 0.050000000000000003,
                            CommissionClient = 0.0,
                            CommissionEmployee = 0.050000000000000003,
                            IsDeleted = false,
                            ProviderId = 14
                        },
                        new
                        {
                            CommissionId = 15,
                            CommissionAgency = 0.14999999999999999,
                            CommissionClient = 0.10000000000000001,
                            CommissionEmployee = 0.050000000000000003,
                            IsDeleted = false,
                            ProviderId = 15
                        });
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.Customers", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.Destinations", b =>
                {
                    b.Property<int>("DestinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DestinationId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DestinationId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.Employees", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WorkStation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.GroupRate", b =>
                {
                    b.Property<int>("GroupRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupRateId"));

                    b.Property<int?>("AgesJuniors")
                        .HasColumnType("int");

                    b.Property<int?>("AgesMinors")
                        .HasColumnType("int");

                    b.Property<decimal?>("DoubleHabitation")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("IndividualHabitation")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("JuniorHabitation")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("MinorHabitation")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("QDPLHabitation")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ReservationHotelId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TripleHabitation")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("GroupRateId");

                    b.HasIndex("ReservationHotelId");

                    b.ToTable("GroupRates");
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.Habitations", b =>
                {
                    b.Property<int>("HabitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HabitationId"));

                    b.Property<int?>("Adults")
                        .HasColumnType("int");

                    b.Property<decimal?>("AdvancePayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Ages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Invoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Minors")
                        .HasColumnType("int");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeHabitation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HabitationId");

                    b.ToTable("Habitations");
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.HabitationsReservation", b =>
                {
                    b.Property<int>("HabitationsReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HabitationsReservationId"));

                    b.Property<int>("HabitationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ReservationHotelId")
                        .HasColumnType("int");

                    b.HasKey("HabitationsReservationId");

                    b.HasIndex("HabitationId");

                    b.HasIndex("ReservationHotelId");

                    b.ToTable("HabitationsReservations");
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.Hotels", b =>
                {
                    b.Property<int>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HotelId");

                    b.HasIndex("DestinationId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.IndividualRate", b =>
                {
                    b.Property<int>("IndividualRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndividualRateId"));

                    b.Property<decimal>("ClientRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ExtraDiscount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("PublicRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ReservationHotelId")
                        .HasColumnType("int");

                    b.HasKey("IndividualRateId");

                    b.HasIndex("ReservationHotelId");

                    b.ToTable("IndividualRates");
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.Providers", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProviderId");

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            ProviderId = 1,
                            IsDeleted = false,
                            Name = "Record Hoteleria"
                        },
                        new
                        {
                            ProviderId = 2,
                            IsDeleted = false,
                            Name = "Record Traslados"
                        },
                        new
                        {
                            ProviderId = 3,
                            IsDeleted = false,
                            Name = "Check In Hoteleria"
                        },
                        new
                        {
                            ProviderId = 4,
                            IsDeleted = false,
                            Name = "Check In renta de autos"
                        },
                        new
                        {
                            ProviderId = 5,
                            IsDeleted = false,
                            Name = "Imacop"
                        },
                        new
                        {
                            ProviderId = 6,
                            IsDeleted = false,
                            Name = "Imacop circuitos"
                        },
                        new
                        {
                            ProviderId = 7,
                            IsDeleted = false,
                            Name = "Imacop traslados"
                        },
                        new
                        {
                            ProviderId = 8,
                            IsDeleted = false,
                            Name = "Imacop entradas a disney"
                        },
                        new
                        {
                            ProviderId = 9,
                            IsDeleted = false,
                            Name = "Promoser parques"
                        },
                        new
                        {
                            ProviderId = 10,
                            IsDeleted = false,
                            Name = "Promoser hoteleria"
                        },
                        new
                        {
                            ProviderId = 11,
                            IsDeleted = false,
                            Name = "Megatravel"
                        },
                        new
                        {
                            ProviderId = 12,
                            IsDeleted = false,
                            Name = "Europamundo"
                        },
                        new
                        {
                            ProviderId = 13,
                            IsDeleted = false,
                            Name = "Chartes"
                        },
                        new
                        {
                            ProviderId = 14,
                            IsDeleted = false,
                            Name = "Israel traslados"
                        },
                        new
                        {
                            ProviderId = 15,
                            IsDeleted = false,
                            Name = "Copper canyon"
                        });
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.ReservationHotel", b =>
                {
                    b.Property<int>("ReservationHotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationHotelId"));

                    b.Property<string>("Agent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CancellationPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeVoicher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateSale")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("GroupCoordinator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HabitationsReservationId")
                        .HasColumnType("int");

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberHabitations")
                        .HasColumnType("int");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaymentLimitDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentLimitDateProvider")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCoordinator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Promoter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("ReservationInvoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("TravelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeHabitation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeReservationId")
                        .HasColumnType("int");

                    b.HasKey("ReservationHotelId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("HabitationsReservationId");

                    b.HasIndex("HotelId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("TypeReservationId");

                    b.ToTable("ReservationHotels");
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.TypeReservation", b =>
                {
                    b.Property<int>("TypeReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeReservationId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeReservationId");

                    b.ToTable("TypeReservations");

                    b.HasData(
                        new
                        {
                            TypeReservationId = 1,
                            IsDeleted = false,
                            Name = "Individual"
                        },
                        new
                        {
                            TypeReservationId = 2,
                            IsDeleted = false,
                            Name = "Grupal"
                        },
                        new
                        {
                            TypeReservationId = 3,
                            IsDeleted = false,
                            Name = "Grupo"
                        });
                });

            modelBuilder.Entity("UConnect.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UConnect.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UConnect.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UConnect.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UConnect.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.Commissions", b =>
                {
                    b.HasOne("TurismoGlobalArandas.Models.Providers", "Providers")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Providers");
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.GroupRate", b =>
                {
                    b.HasOne("TurismoGlobalArandas.Models.ReservationHotel", "reservationHotel")
                        .WithMany()
                        .HasForeignKey("ReservationHotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("reservationHotel");
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.HabitationsReservation", b =>
                {
                    b.HasOne("TurismoGlobalArandas.Models.Habitations", "Habitations")
                        .WithMany()
                        .HasForeignKey("HabitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TurismoGlobalArandas.Models.ReservationHotel", "reservationHotel")
                        .WithMany()
                        .HasForeignKey("ReservationHotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Habitations");

                    b.Navigation("reservationHotel");
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.Hotels", b =>
                {
                    b.HasOne("TurismoGlobalArandas.Models.Destinations", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.IndividualRate", b =>
                {
                    b.HasOne("TurismoGlobalArandas.Models.ReservationHotel", "reservationHotel")
                        .WithMany()
                        .HasForeignKey("ReservationHotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("reservationHotel");
                });

            modelBuilder.Entity("TurismoGlobalArandas.Models.ReservationHotel", b =>
                {
                    b.HasOne("TurismoGlobalArandas.Models.Customers", "Customers")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("TurismoGlobalArandas.Models.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("TurismoGlobalArandas.Models.HabitationsReservation", "HabitationsReservation")
                        .WithMany()
                        .HasForeignKey("HabitationsReservationId");

                    b.HasOne("TurismoGlobalArandas.Models.Hotels", "Hotels")
                        .WithMany()
                        .HasForeignKey("HotelId");

                    b.HasOne("TurismoGlobalArandas.Models.Providers", "Providers")
                        .WithMany()
                        .HasForeignKey("ProviderId");

                    b.HasOne("TurismoGlobalArandas.Models.TypeReservation", "TypeReservation")
                        .WithMany()
                        .HasForeignKey("TypeReservationId");

                    b.Navigation("Customers");

                    b.Navigation("Employees");

                    b.Navigation("HabitationsReservation");

                    b.Navigation("Hotels");

                    b.Navigation("Providers");

                    b.Navigation("TypeReservation");
                });

            modelBuilder.Entity("UConnect.Entities.User", b =>
                {
                    b.HasOne("TurismoGlobalArandas.Models.Employees", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
